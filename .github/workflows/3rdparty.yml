name: Sync 3rd party packages

on:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  start:
    runs-on: ubuntu-latest
    name: "Start"
    outputs:
      matrix: ${{steps.lists.outputs.matrix}}
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0
  
      - name: Build list
        id: lists
        run: |

          MATRIX=$(
          while IFS="," read -r rec_column1 rec_column2 rec_column3 rec_column4 rec_column5 rec_column6 rec_column7
          do
              echo "$rec_column1:$rec_column4"
          done < <(tail -n +2 projects.csv)
          )
          echo "matrix=$(for x in $(echo "${MATRIX}"); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq -c)" >> $GITHUB_OUTPUT

  download:
    needs: [start]
    strategy:
      fail-fast: false
      matrix:
        node: ${{fromJson(needs.start.outputs.matrix)}}
    
    name: "Mirroring"
    runs-on: [Ubuntu-latest]
    steps:

      - name: Install SSH key for storage
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}
          if_key_exists: replace

      - name: Import GPG key

        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Checkout Armbian build script
        uses: actions/checkout@v3.1.0
        with:
          repository: armbian/build
          path: build
          fetch-depth: '100'
          clean: false

      - name: Install Aptly
        run: |

          wget https://github.com/aptly-dev/aptly/releases/download/v1.5.0/aptly_1.5.0_amd64.deb
          sudo dpkg -i aptly_1.5.0_amd64.deb
          sudo rm aptly_1.5.0_amd64.deb

      - name: Install keys
        run: |
        
          find keys/ -type f -name "*.gpg" -exec gpg --import --no-default-keyring --keyring trustedkeys.gpg "{}" \;

      - name: Download
        run: |

          PROJECT=$(echo ${{ matrix.node }} | cut -d":" -f1)
          RELEASE=$(echo ${{ matrix.node }} | cut -d":" -f2)
          URL=$(grep "$PROJECT,[^,]\+,[^,]\+,$RELEASE," projects.csv | cut -d"," -f2)
          KEY=$(grep "$PROJECT,[^,]\+,[^,]\+,$RELEASE," projects.csv | cut -d"," -f3)
          TARGET=$(grep "$PROJECT,[^,]\+,[^,]\+,$RELEASE," projects.csv | cut -d"," -f5)
          METHOD=$(grep "$PROJECT,[^,]\+,[^,]\+,$RELEASE," projects.csv | cut -d"," -f6)
          GLOB=$(grep "$PROJECT,[^,]\+,[^,]\+,$RELEASE," projects.csv | cut -d"," -f7)

          # read existing releases
          ALL_RELEASES=($(find build/config/distributions -mindepth 1 -maxdepth 1 -type d | sed 's/.*\///' ))

          # recreate folder structure as we are uploading to our system
          for i in ${ALL_RELEASES[@]}; do
              mkdir -p output/debs/${i}
              mkdir -p output/debs/extra/${i}-utils
              mkdir -p output/debs/extra/${i}-desktop
          done

          # we use different download metods (github, aplty)
          if [[ ${METHOD} == gh ]]; then
              # where we are copying from
              SOURCE="temp/"
              gh release download -p '*.deb' --repo ${URL} --dir temp
          elif [[ ${METHOD} == direct ]]; then
              # where we are copying from
              SOURCE="temp/"
              mkdir -p ${SOURCE}
              wget -O ${SOURCE}/${PROJECT}.deb ${URL}
          else
              # where we are copying from
              SOURCE="/home/runner/.aptly/public/"
              COMPONENT="main"
              [[ $KEY == "./" ]] && COMPONENT=""
              # generate mirror
              aptly mirror create ${PROJECT}-${RELEASE} ${URL} ${KEY} ${COMPONENT}
              aptly mirror update ${PROJECT}-${RELEASE} 
              aptly snapshot create ${PROJECT}-${RELEASE} from mirror ${PROJECT}-${RELEASE}
              # publish
              aptly publish -architectures="armhf,arm64,amd64,riscv64" -batch=true -passphrase=${{ secrets.GPG_PASSPHRASE1 }} snapshot ${PROJECT}-${RELEASE}
          fi
          ls -l $SOURCE
          # copy to location
          if [[ ${TARGET} == main ]]; then
              find $SOURCE -type f -name "*$GLOB*.deb" -exec mv {} output/debs/ \;
          elif [[ ${RELEASE} == all ]]; then
              for i in ${ALL_RELEASES[@]}; do
                  find $SOURCE -type f -name "*$GLOB*.deb" -exec cp {} output/debs/extra/${i}-${TARGET} \;
                  echo "Copy to all output/debs/extra/${i}-${TARGET}"
              done
          else
              find $SOURCE -type f -name "*$GLOB*.deb" -exec mv {} output/debs/extra/${RELEASE}-${TARGET} \;
          fi

      - name: Deploy to server
        run: |

          sudo apt-get -y -qq install lftp
          lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms output/debs/ debs-beta/ ;bye" sftp://users.armbian.com

  stop:

    name: Stop
    needs: [start,download]
    runs-on: [ubuntu-latest]
    steps:
      - run: |
          echo "Start"
